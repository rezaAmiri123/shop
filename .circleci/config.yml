version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/python:3.6.1


    working_directory: ~/repo
    environment:
      TEST_RESULTS: /tmp/test-results

    steps:
      - checkout

        #      # Download and cache dependencies
        #      - restore_cache:
        #          keys:
        #          - v1-dependencies-{{ checksum "pollsapi/requirements.txt" }}
        #          # fallback to using the latest cache if no exact match is found
        #          - v1-dependencies-
        #
        #      - run:
        #          name: install dependencies
        #          command: |
        #            python3 -m venv venv
        #            . venv/bin/activate
        #            pip install -r requirements.txt
        #
        #      - save_cache:
        #          paths:
        #            - ./venv
        #          key: v1-dependencies-{{ checksum "requirements.txt" }}
        #
        #      - run:
        #          name: run tests
        #          command: |
        #            . venv/bin/activate
        #            python manage.py test
      - run: mkdir -p $TEST_RESULTS

      - setup_remote_docker

      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            # VER="19.03.1-ce"
            curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz --overwrite
            sudo cp -Rf /tmp/docker/* /usr/bin 

      - run:
          name: Install Docker Compose
          command: |
            set -x
            sudo curl -L https://github.com/docker/compose/releases/download/1.11.2/docker-compose-`uname -s`-`uname -m` > docker-compose
            # sudo curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-`uname -s`-`uname -m` > docker-compose
            sudo mv -f docker-compose /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose

            #      - run:
            # name: Build service
            #command: sudo make

      - run:
          name: Start container and verify it's working
          command: |
            set -x
            # docker build . -t djangoapp
            # docker-compose will start 2 containers, the one with service will be named `contacts`
            # we start another container with curl in the same network as `contacts`, this way we have
            # all exposed ports from `contacts` available on `localhost` in this new container
            # docker run --network container:contacts \
            #  appropriate/curl --retry 10 --retry-delay 1 --retry-connrefused http://localhost:8080/contacts/test
            docker build . -t myshop
            docker-compose run  djangoapp /bin/bash -c "cd project;python manage.py  migrate;python manage.py collectstatic  --no-input;coverage run --source='.'  manage.py test --settings=config.settings;coverage report"
            # docker-compose run  djangoapp /bin/bash -c "cd project;python manage.py collectstatic  --no-input"
            # docker-compose run --rm djangoapp /bin/bash -c "cd project; coverage run --source='.'  manage.py test  "
            # docker-compose run --rm djangoapp /bin/bash -c "cd project; coverage report"


            #      - store_artifacts:
            #          path: test-reports
            #          destination: test-reports

            #      - deploy:
            #          name: Build and push Docker image
            #          command: |
            #            TAG="0.1.${CIRCLE_BUILD_NUM}"
            #            docker build -t circleci/cci-demo-docker:$TAG .
            #            docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
            #            docker push circleci/cci-demo-docker:$TAG
            
      - store_artifacts:
          path: /tmp/test-results
          destination: raw-test-output

      - store_test_results:
          path: /tmp/test-results       
